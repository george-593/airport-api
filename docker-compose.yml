services:
    db:
        image: postgres
        container_name: airport-api-db-postgres
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_DB=${POSTGRES_DB}
        ports:
            - "${POSTGRES_PORT}:5432"
        networks:
            - airport-api-network
        volumes:
            - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
        restart: always

    backend:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: backend
        ports:
            - "${API_PORT}:${API_PORT}"
        environment:
            - API_ROOT=${API_ROOT}
            - API_PORT=${API_PORT}
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=db
        networks:
            - airport-api-network
        depends_on:
            - db
        restart: always

    loadairports:
        build:
            context: ./backend
            dockerfile: Dockerfile
        container_name: airport-api-loadairports
        command: npm run loadAirports
        environment:
            - POSTGRES_USER=${POSTGRES_USER}
            - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
            - POSTGRES_PORT=${POSTGRES_PORT}
            - POSTGRES_DB=${POSTGRES_DB}
            - POSTGRES_HOST=db
            - DATA_PATH=${DATA_PATH}
        networks:
            - airport-api-network
        depends_on:
            - db
        restart: "no"

networks:
    airport-api-network:
        driver: bridge